package com.example.controller;

import com.example.entity.MessageCode;
import com.example.service.MessageMasterService;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.concurrent.CompletableFuture;
import java.util.List;

@RestController
@RequestMapping("/message-master")
public class MessageMasterController {

    private static final Logger logger = LogManager.getLogger(MessageMasterController.class);

    @Autowired
    private MessageMasterService messageMasterService;

    @PostMapping("/save")
    public ResponseEntity<ReqRes> saveMessageCodes() {
        ReqRes response = new ReqRes();
        try {
            messageMasterService.saveInitialMessageCodes();
            response.setStatusCode(200);
            response.setMessage("Message codes saved successfully");
            CompletableFuture.runAsync(() -> {
                auditTrailService.logAuditTrail("Message codes saved", "SUCCESS", "Initial message codes saved");
            });
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            logger.error("Error saving message codes", e);
            response.setStatusCode(500);
            response.setError(e.getMessage());
            response.setMessage("Failed to save message codes");
            return ResponseEntity.status(500).body(response);
        }
    }

    @PutMapping("/update")
    public ResponseEntity<ReqRes> updateMessageCode(@RequestBody MessageCode messageCode) {
        ReqRes response = new ReqRes();
        try {
            messageMasterService.updateMessageCode(messageCode);
            response.setStatusCode(200);
            response.setMessage("Message code updated successfully");
            CompletableFuture.runAsync(() -> {
                auditTrailService.logAuditTrail("Message code updated", "SUCCESS", "Code: " + messageCode.getCode());
            });
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            logger.error("Error updating message code", e);
            response.setStatusCode(500);
            response.setError(e.getMessage());
            response.setMessage("Failed to update message code");
            return ResponseEntity.status(500).body(response);
        }
    }

    @DeleteMapping("/delete/{code}")
    public ResponseEntity<ReqRes> deleteMessageCode(@PathVariable String code) {
        ReqRes response = new ReqRes();
        try {
            messageMasterService.deleteMessageCode(code);
            response.setStatusCode(200);
            response.setMessage("Message code deleted successfully");
            CompletableFuture.runAsync(() -> {
                auditTrailService.logAuditTrail("Message code deleted", "SUCCESS", "Code: " + code);
            });
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            logger.error("Error deleting message code", e);
            response.setStatusCode(500);
            response.setError(e.getMessage());
            response.setMessage("Failed to delete message code");
            return ResponseEntity.status(500).body(response);
        }
    }

    @GetMapping("/all")
    public ResponseEntity<ReqRes> getAllMessageCodes() {
        ReqRes response = new ReqRes();
        try {
            List<MessageCode> codes = messageMasterService.getAllMessageCodes();
            response.setStatusCode(200);
            response.setMessage("Message codes fetched successfully");
            response.setData(codes);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            logger.error("Error fetching message codes", e);
            response.setStatusCode(500);
            response.setError(e.getMessage());
            response.setMessage("Failed to fetch message codes");
            return ResponseEntity.status(500).body(response);
        }
    }
}

package com.example.service;

import com.example.dao.MessageMasterDao;
import com.example.entity.MessageCode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import javax.annotation.PostConstruct;
import java.util.Arrays;
import java.util.List;

@Service
public class MessageMasterService {

    @Autowired
    private MessageMasterDao messageMasterDao;

    private static final List<MessageCode> INITIAL_CODES = Arrays.asList(
            new MessageCode("A", "A-Always"),
            new MessageCode("P", "P-Paid Only"),
            new MessageCode("R", "R-Reject Only"),
            new MessageCode("C", "C-Captured Only")
    );

    @PostConstruct
    public void saveInitialMessageCodes() {
        INITIAL_CODES.forEach(code -> {
            if (!messageMasterDao.existsByCode(code.getCode())) {
                messageMasterDao.save(code);
            }
        });
    }

    public void updateMessageCode(MessageCode messageCode) {
        if (messageMasterDao.existsByCode(messageCode.getCode())) {
            messageMasterDao.save(messageCode);
        }
    }

    public void deleteMessageCode(String code) {
        messageMasterDao.deleteByCode(code);
    }

    public List<MessageCode> getAllMessageCodes() {
        return messageMasterDao.findAll();
    }
}



package com.example.dao;

import com.example.entity.MessageCode;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface MessageMasterDao extends JpaRepository<MessageCode, Long> {
    boolean existsByCode(String code);
    void deleteByCode(String code);
}

package com.example.entity;

import javax.persistence.*;

@Entity
public class MessageCode {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long msg_rid;

    private String code;
    private String description;

    public MessageCode() {}

    public MessageCode(String code, String description) {
        this.code = code;
        this.description = description;
    }

    public Long getMsgRid() {
        return msg_rid;
    }

    public void setMsgRid(Long msg_rid) {
        this.msg_rid = msg_rid;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}
