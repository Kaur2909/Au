package com.example.controller;

import com.example.entity.MessageCode;
import com.example.service.MessageMasterService;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.concurrent.CompletableFuture;
import java.util.List;

@RestController
@RequestMapping("/message-master")
public class MessageMasterController {

    private static final Logger logger = LogManager.getLogger(MessageMasterController.class);

    @Autowired
    private MessageMasterService messageMasterService;

    @PostMapping("/save")
    public ResponseEntity<ReqRes> saveMessageCodes(@RequestBody MessageMasterDTO messageMasterDTO) {
        ReqRes response = new ReqRes();
        try {
            messageMasterService.saveMessageCode(messageMasterDTO);
            response.setStatusCode(200);
            response.setMessage("Message code saved successfully");
            CompletableFuture.runAsync(() -> {
                String details = String.format("Code: %s, Message: %s", messageMasterDTO.getCode(), messageMasterDTO.getMessageString());
                auditTrailService.logAuditTrail("Message code saved", "SUCCESS", details);
            });
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            logger.error("Error saving message code", e);
            response.setStatusCode(500);
            response.setError(e.getMessage());
            response.setMessage("Failed to save message code");
            return ResponseEntity.status(500).body(response);
        }
    }

    @PutMapping("/update/{code}")
    public ResponseEntity<ReqRes> updateMessageCode(@PathVariable String code, @RequestBody MessageMasterDTO messageMasterDTO) {
        ReqRes response = new ReqRes();
        try {
            messageMasterService.updateMessageCode(code, messageMasterDTO);
            response.setStatusCode(200);
            response.setMessage("Message code updated successfully");
            CompletableFuture.runAsync(() -> {
                String details = String.format("Code: %s, New Message: %s", code, messageMasterDTO.getMessageString());
                auditTrailService.logAuditTrail("Message code updated", "SUCCESS", details);
            });
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            logger.error("Error updating message code", e);
            response.setStatusCode(500);
            response.setError(e.getMessage());
            response.setMessage("Failed to update message code");
            return ResponseEntity.status(500).body(response);
        }
    }

    @DeleteMapping("/delete/{code}")
    public ResponseEntity<ReqRes> deleteMessageCode(@PathVariable String code) {
        ReqRes response = new ReqRes();
        try {
            messageMasterService.deleteMessageCode(code);
            response.setStatusCode(200);
            response.setMessage("Message code deleted successfully");
            CompletableFuture.runAsync(() -> {
                auditTrailService.logAuditTrail("Message code deleted", "SUCCESS", "Code: " + code);
            });
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            logger.error("Error deleting message code", e);
            response.setStatusCode(500);
            response.setError(e.getMessage());
            response.setMessage("Failed to delete message code");
            return ResponseEntity.status(500).body(response);
        }
    }

    @GetMapping("/search")
    public ResponseEntity<ResponseWrapper<List<MessageCode>>> searchMessageCodes(@RequestParam(required = false) String keyword) {
        try {
            List<MessageCode> codes = messageMasterService.searchMessageCodes(keyword);
            ResponseWrapper<List<MessageCode>> responseWrapper = new ResponseWrapper<>(codes);
            return ResponseEntity.ok(responseWrapper);
        } catch (Exception e) {
            logger.error("Error searching message codes", e);
            return ResponseEntity.status(500).body(new ResponseWrapper<>("Failed to fetch message codes"));
        }
    }
}

// MessageMasterService Implementation
package com.example.service;

import com.example.dto.MessageMasterDTO;
import com.example.entity.MessageCode;
import com.example.repository.MessageMasterRepository;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;

@Service
public class MessageMasterService {

    private static final Logger logger = LogManager.getLogger(MessageMasterService.class);

    @Autowired
    private MessageMasterRepository messageMasterRepository;

    public void saveMessageCode(MessageMasterDTO messageMasterDTO) {
        try {
            MessageCode messageCode = new MessageCode();
            messageCode.setCode(messageMasterDTO.getCode());
            messageCode.setDescription(messageMasterDTO.getMessageString());
            messageMasterRepository.save(messageCode);
        } catch (Exception e) {
            logger.error("Failed to save message code", e);
            throw new RuntimeException("Error while saving message code", e);
        }
    }

    public void updateMessageCode(String code, MessageMasterDTO messageMasterDTO) {
        try {
            Optional<MessageCode> optionalMessageCode = messageMasterRepository.findByCode(code);
            if (optionalMessageCode.isPresent()) {
                MessageCode messageCode = optionalMessageCode.get();
                messageCode.setDescription(messageMasterDTO.getMessageString());
                messageMasterRepository.save(messageCode);
            } else {
                throw new RuntimeException("Message code not found");
            }
        } catch (Exception e) {
            logger.error("Failed to update message code", e);
            throw new RuntimeException("Error while updating message code", e);
        }
    }

    public void deleteMessageCode(String code) {
        try {
            messageMasterRepository.deleteByCode(code);
        } catch (Exception e) {
            logger.error("Failed to delete message code", e);
            throw new RuntimeException("Error while deleting message code", e);
        }
    }

    public List<MessageCode> searchMessageCodes(String keyword) {
        if (keyword == null || keyword.isEmpty()) {
            return messageMasterRepository.findAllByOrderByMsgRidDesc();
        } else {
            return messageMasterRepository.findByCodeContainingIgnoreCaseOrDescriptionContainingIgnoreCase(keyword, keyword);
        }
    }
}


   Optional<MessageCode> findByCode(String code);
    
    void deleteByCode(String code);
    
    List<MessageCode> findByCodeContainingIgnoreCaseOrDescriptionContainingIgnoreCase(String codeKeyword, String descriptionKeyword);
    
    List<MessageCode> findAllByOrderByMsgRidDesc();